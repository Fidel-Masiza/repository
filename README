# Q&A Demo Application README

## Overview

This application is a simple Q&A demo built using Streamlit and the Hugging Face Inference API. It allows users to input questions and receive responses generated by the `google/flan-t5-large` model hosted on Hugging Face. 

## Features

- **User Input**: Users can enter their questions via a text input field.
- **Model Interaction**: The application sends the user's question to the Hugging Face model and retrieves a response.
- **Error Handling**: Displays error messages if the API request fails.

## Requirements

To run this application, you need:

- Python 3.7 or higher
- Streamlit library
- Requests library
- An API key from Hugging Face

## Installation

1. **Clone the repository** (if applicable):
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. **Install required libraries**:
   ```bash
   pip install streamlit requests
   ```

3. **Set up your Hugging Face API Key**:
   - Create an account on [Hugging Face](https://huggingface.co).
   - Obtain your API key from your account settings.
   - Set the API key as an environment variable:
     ```bash
     export HUGGING_FACE_API_KEY='your_api_key_here'
     ```

## Usage

1. **Run the Streamlit app**:
   ```bash
   streamlit run app.py
   ```

2. **Interact with the application**:
   - Open your web browser and go to `http://localhost:8501`.
   - Enter a question in the input field and click "Ask the question".

## Code Explanation

### Main Components

- **Function to Get Response**:
  ```python
  def get_hugging_face_response(question):
      ...
  ```
  This function sends a POST request to the Hugging Face API with the user's question and returns the model's response.

- **Streamlit Interface**:
  ```python
  st.set_page_config(page_title="Q&A Demo")
  ...
  if submit:
      response = get_hugging_face_response(input_text)
      ...
  ```
  This section initializes the Streamlit app, handles user input, and displays responses.

### Error Handling

The application checks if the API request was successful by examining the HTTP status code. If an error occurs, it displays an appropriate message to the user.

## Conclusion

This Q&A demo application demonstrates how to integrate Streamlit with Hugging Face's Inference API to create an interactive question-answering interface. You can customize it further by changing the model or enhancing the UI.

